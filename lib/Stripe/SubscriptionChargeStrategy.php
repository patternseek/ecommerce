<?php
/**
 *
 * Â© 2019 Tolan Blundell.  All rights reserved.
 * <tolan@patternseek.net>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 *
 */

namespace PatternSeek\ECommerce\Stripe;

use PatternSeek\ECommerce\Stripe\Facade\StripeFacade;
use PatternSeek\ECommerce\Transaction;

class SubscriptionChargeStrategy extends AbstractChargeStrategy
{

    public function initialPaymentAttempt(
        $paymentMethodId,
        $amount,
        $currency,
        $description,
        $email,
        StripeFacade $stripe
    ){
        $params = [
            "payment_method" => $paymentMethodId,
            "description" => $this->state->email
        ];
        $customer = $stripe->customerCreate( $params );

        // Only support one subscription in the basket
        $lineItem = $this->state->lineItems[0];
        $subscriptionRaw = $stripe->subscriptionCreate( [
            'customer' => $customer->id,
            'items' => [ [ 'plan' => $lineItem->subscriptionTypeId ] ],
            'tax_percent' => round( $lineItem->vatRate * 100, 2 ),
            'expand'=>["latest_invoice.payment_intent"]
        ] );
        
        print_r( $subscriptionRaw );
        
//        $txn = new Transaction();
//        $txn->paymentCountryCode = $paymentCountryCode;
//        $txn->paymentType = "card";
//        $txn->setSubscriptions( $subs );
//        $ret = $this->parent->subscriptionSuccess( $txn );
//
// This stuff needs to be generated by looping through the subscriptions
        
    }

}